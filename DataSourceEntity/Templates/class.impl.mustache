using System.Collections.Generic;
using System.Linq;
using System;
using DataSources;

namespace {{NameSpace}}
{
	/// <summary>
	/// This class generated by DataSourceEntity tool.
	/// </summary>
	// ReSharper disable InconsistentNaming
	// ReSharper disable NotAccessedField.Global
	// ReSharper disable MemberCanBePrivate.Global
	public sealed class {{FieldsName}}
	{
		{{#Fields}}
		/// <summary>
		/// {{Comment}}
		/// {{#Indexed}}This field is indexed.{{/Indexed}}
		/// {{#Default}}Default: {{Default}}{{/Default}}
		/// </summary>
		public const string {{FieldIdentifier}} = "{{FieldName}}";

		{{/Fields}}
	}

	/// <summary>
	/// This class generated by DataSourceEntity tool.
	/// </summary>
	// ReSharper disable InconsistentNaming
	// ReSharper disable NotAccessedField.Global
	// ReSharper disable MemberCanBePrivate.Global
	public {{#Abstract}}abstract {{/Abstract}}partial class {{ClassName}} : {{BaseClass}}
	{
{{^Abstract}}
		/// <summary>
		/// Creates a list of {{ClassName}} objects from a collection of Record objects.
		/// </summary>
		public static List<{{ClassName}}> ToList(IEnumerable<Record> pRecords)
		{
			return (from record in pRecords select new {{ClassName}}(record)).ToList();
		}

		/// <summary>
		/// Creates a {{ClassName}} object from a Record object or returns Null.
		/// </summary>
		public static {{ClassName}} Create(Record pRecord)
		{
			return pRecord == null ? null : new {{ClassName}}(pRecord);
		}
{{/Abstract}}

		{{#Fields}}
		/// <summary>
		/// {{Comment}}
		/// {{#Indexed}}This field is indexed.{{/Indexed}}
		/// {{#Default}}Default: {{Default}}{{/Default}}
		/// </summary>
		public {{Type}} {{Property}}
		{
			get { return {{#Nullable}}_Record.isNull("{{FieldName}}") ? ({{Type}})null : {{/Nullable}}_Record.{{Func}}("{{FieldName}}"); }
			set { _Record["{{FieldName}}"] = value; }
		}

		{{/Fields}}
{{^Abstract}}
		/// <summary>
		/// Constructor
		/// </summary>
		public {{ClassName}}(UInt32 pID)
			: base(new Record())
		{
			_Record.ID = pID;
		}

		/// <summary>
		/// Constructor
		/// </summary>
		public {{ClassName}}()
			: base(new Record())
		{
		}
{{/Abstract}}

		/// <summary>
		/// Constructor
		/// </summary>
		{{#Abstract}}protected{{/Abstract}}{{^Abstract}}public{{/Abstract}} {{ClassName}}(Record pRecord)
			: base(pRecord)
		{
		}
	}
}